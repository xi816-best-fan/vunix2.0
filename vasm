#!/usr/bin/python3

import sys;
import time;

T_INS   = 0x00;
T_INT   = 0x01;
T_LAB   = 0x02;
T_REG   = 0x03;
T_ID    = 0x05;
T_ADDRR = 0x06;
T_ADDRB = 0x07;
T_BYTE  = 0x08;
T_STR   = 0x09;
T_MCR   = 0x0A;
T_EOL   = 0x0B;
T_EOF   = 0x0C;

ASTINS   = 0x00;
ASTBYTES = 0x01;
ASTRES   = 0x02;
ASTEOF   = 0x03;

HUMAN_TOKS = ["inst", "int", "label", "reg", "id", "addr", "[addr]", "byte", "string", "mcr", "eol", "eof"];
HUMAN_AST  = ["INST", "BYTES", "RESERVE", "EOF"];

LET    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_";
LETEXT = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy0123456789z-_.";
DIG    = "0123456789";
WHI    = " \r\0\t,";
DIGEXT = "0123456789ABCDEF";
KEY2   = [
  "nop", "mov", "add", "sub", "and", "or", "xor", "jmp", "jz", "jnz", "imm", "hlt"
];
KEYR   = {
  "r0": 0x00,  "r1": 0x01,  "r2": 0x02,  "r3": 0x03,  "r4": 0x04,  "r5": 0x05,  "r6": 0x06,  "r7": 0x07,
  "r8": 0x08,  "r9": 0x09,  "r10": 0x0A, "r11": 0x0B, "r12": 0x0C, "r13": 0x0D, "r14": 0x0E, "r15": 0x0F,
};

def PrintTokens(toks: list):
  for i,j in enumerate(toks):
    if (len(j) == 2):
      print(f"{i}: {HUMAN_TOKS[j[0]]} {j[1]}");
    elif (len(j) == 1):
      print(f"{i}: {HUMAN_TOKS[j[0]]}");

def PrintAst(toks: list):
  for i in toks:
    print(f"${hex(i[3])[2:].upper():0>4}: {HUMAN_AST[i[0]]} {i[1]} {i[2]}");

def PrintLabs(labs: dict):
  print("\nLabel symbols:");
  for i in labs:
    print(f"{i+':': <30}${hex(labs[i])[2:].upper():0>4}");

def ExportLabs(filename: str, labs: dict, output_file: str):
  with open(output_file, "w") as fl:
    for i in labs:
      fl.write(f"{i}	{hex(labs[i])[2:].upper():0>4}\n");

def ImportLabs(filename: str, labs: dict, import_file: str):
  with open(import_file, "r") as fl:
    for line in fl.read().split("\n"):
      if (line):
        symbol,val = line.split(chr(9));
        labs[symbol] = int(val, base=16);
  return labs;

def OffsetLabs(labs: dict, offset: int):
  for i in labs:
    labs[i] += offset;
  return labs;

def usage():
  print("vasm -- Kakashka Assembler 1.0 (but who cares about the version anyways)");
  print("Usage: vasm [OPTIONS] <file.asm> <file.bin>");
  print("Options:");
  print("  -h           Show help");
  print("  -o [VAL]     Offset labels to VAL");
  print("  -i <file>    Import labels from a file");
  print("  -e           Export labels to the output file");
  print("  -I           Start interactive mode");

# Lexer:
def Lex(prog: str, filename: str):
  prog += "\n\0";
  labelscope: str  = "";
  proglen:    int  = len(prog);
  linenum:    int  = 1;
  toks:       list = [];
  pos:        int  = 0;
  buf:        str  = "";
  while (True):
    if (prog[pos] == "\0"):
      toks.append((T_EOL,));
      toks.append((T_EOF,));
      return toks, 0;
    elif (prog[pos] == ";"):
      pos += 1;
      while (prog[pos] != "\n"):
        pos += 1;
    elif ((prog[pos] == "/") and (prog[pos+1] == "/")):
      pos += 1;
      while (prog[pos] != "\n"):
        pos += 1;
    elif ((prog[pos] == "/") and (prog[pos+1] == "*")):
      pos += 1;
      while ((prog[pos] != "*") or (prog[pos+1] != "/")):
        pos += 1;
      pos += 2;
    elif (prog[pos] in WHI):
      pos += 1;
    elif (prog[pos] == "\n"):
      if ((toks) and (toks[-1][0] != T_EOL)):
        toks.append((T_EOL,));
      pos += 1;
      linenum += 1;
    elif (prog[pos] in "."): # Local label
      pos += 1;
      while (prog[pos] in LETEXT):
        buf += prog[pos];
        pos += 1;
      if (prog[pos] == ":"):
        toks.append((T_LAB, labelscope+"."+buf));
        pos += 1;
      else:
        toks.append((T_ID, labelscope+"."+buf));
      buf = "";
    elif (prog[pos] in DIG):
      while (prog[pos] in DIG):
        buf += prog[pos];
        pos += 1;
      toks.append((T_INT, int(buf, base=10)));
      buf = "";
    elif (prog[pos] == "\""):
      pos += 1;
      while (prog[pos] != "\""):
        if (prog[pos] == "$"):
          buf += "\n";
        elif (prog[pos] == "\n"):
          print(f"vasm: {filename}:{linenum}:1: Unterminated string literal");
          exit(1);
        elif ((prog[pos] == "\\") and (prog[pos+1] == "\"")):
          buf += "\"";
          pos += 1;
        elif (prog[pos] == "^"):
          if (ord(prog[pos+1]) in range(64, 97)):
            buf += chr(ord(prog[pos+1])-64);
          elif (prog[pos+1] in "^$"):
            buf += prog[pos+1];
          pos += 1;
        else:
          buf += prog[pos];
        pos += 1;
      pos += 1;
      toks.append((T_STR, buf.encode()));
      buf = "";
    elif (prog[pos] == "'"):
      pos += 1;
      if (prog[pos] == "$"):
        buf = 10;
      elif ((prog[pos] == "\\") and (prog[pos+1] == "\"")):
        buf = 34;
        pos += 2;
      elif (prog[pos] == "^"):
        if (ord(prog[pos+1]) in range(64, 97)):
          buf = ord(prog[pos+1])-64;
        elif (prog[pos+1] in "^$"):
          buf = ord(prog[pos+1]);
        pos += 1;
      else:
        buf = ord(prog[pos]);
      pos += 1;
      if (prog[pos] != "'"):
        print(f"vasm: {filename}:{linenum}:1: Unterminated character literal");
        exit(1);
      pos += 1;
      toks.append((T_INT, buf));
      buf = "";
    elif (prog[pos] == "^"):
      pos += 1;
      while (prog[pos] in DIGEXT):
        buf += prog[pos];
        pos += 1;
      pos += 1;
      toks.append((T_INT, int(buf, base=16)));
      buf = "";
      # cpos += 1;
    elif (prog[pos] == "$"):
      pos += 1;
      while (prog[pos] in DIGEXT):
        buf += prog[pos];
        pos += 1;
      toks.append((T_INT, int(buf, base=16)));
      buf = "";
    elif (prog[pos] in LET):
      while (prog[pos] in LETEXT):
        buf += prog[pos];
        pos += 1;
      if (prog[pos] == ":"):
        toks.append((T_LAB, buf));
        labelscope = buf;
        pos += 1;
      else:
        if (buf in KEY2):
          toks.append((T_INS, buf));
        elif (buf == "bytes"):
          toks.append((T_BYTE, 0));
        elif (buf in KEYR):
          toks.append((T_REG, KEYR[buf]));
        elif (buf == "reserve"):
          toks.append((T_MCR, "reserve"));
        elif (buf == "extern"):
          toks.append((T_MCR, "extern"));
        else:
          toks.append((T_ID, buf));
      buf = "";
    else:
      print(f"\033[31mUnknown\033[0m character {hex(ord(prog[pos]))[2:].upper():0>2}");
      print(f"\033[33m  Note:\033[0m at position {hex(pos)[2:]:0>4}h");
      print(f"\033[33m  Note:\033[0m at position {pos}");
      print(f"\033[33m  Note:\033[0m `{prog[pos]}`");
      exit(1);
  return [], 1;

def FetchLabels(prog: list, disk: bool):
  labs = dict();
  for i in prog:
    if (i[0] == T_LAB):
      labs[i[1]] = i[2]+(0x090000*disk);
  return labs;

def RemEmpty(prog: str):
  return "\n".join([i for i in prog.split("\n") if i]);

ParseInst = lambda toks, b, pos, pc: \
  ((ASTINS, "mov-rr", (toks[pos+1][1], toks[pos+2][1]), pos + 3) if ((b == "mov") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG)) else
   (ASTINS, "mov-ri", (toks[pos+1][1], toks[pos+2][1]), pos + 3) if ((b == "mov") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_INT)) else
   (ASTINS, "add-rrri", (toks[pos+1][1], toks[pos+2][1], toks[pos+3][1], toks[pos+4][1]), pos + 5) if ((b == "add") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG) and (toks[pos+3][0] == T_REG) and (toks[pos+4][0] == T_INT)) else
   (ASTINS, "sub-rrri", (toks[pos+1][1], toks[pos+2][1], toks[pos+3][1], toks[pos+4][1]), pos + 5) if ((b == "sub") and (toks[pos+1][0] == T_REG) and (toks[pos+2][0] == T_REG) and (toks[pos+3][0] == T_REG) and (toks[pos+4][0] == T_INT)) else
   (ASTINS, "jnz-r", (toks[pos+1][1]), pos + 2) if ((b == "jnz") and (toks[pos+1][0] == T_ID)) else
   (ASTINS, "nop", (), pos + 1)                                 if ((b == "nop")) else
   (ASTINS, "hlt", (), pos + 1)                                 if ((b == "hlt")) else
   (print("vasm: unknown instruction", toks[pos]) and exit(1))
  );

# Parser:
def Parse(toks: list, filename: str, expm: int) -> list:
  labels: dict = {};
  ast:    list = [];
  pos:    int  = 0;
  pc:     int  = 0;
  while (toks[pos][0] != T_EOF):
    if (toks[pos][0] == T_INS): # Parse an instruction
      asttype, astvalue, astop, pos = ParseInst(toks, toks[pos][1], pos, pc);
      ast.append([asttype, astvalue, astop, pc]);
      pc += 4;
    elif (toks[pos][0] == T_LAB): # Parse a label
      labels[toks[pos][1]] = pc;
      pos += 1;
    elif (toks[pos][0] == T_BYTE):
      ast.append([ASTBYTES, "__B_raw", [], pc]);
      pos += 1;
      while (toks[pos][0] != T_EOL):
        if (toks[pos][0] == T_INT):
          ast[-1][2].append(toks[pos][1]);
          pc += 1;
        elif (toks[pos][0] == T_STR):
          for i in toks[pos][1]:
            ast[-1][2].append(i);
          pc += len(toks[pos][1]);
        else:
          print(f"vasm: error: the bytes are too cooked. {HUMAN_TOKS[toks[pos][0]]}");
          exit(1);
        pos += 1;
      pos += 1;
    elif (toks[pos][0] == T_MCR): # Parse macros
      if (toks[pos][1] == "reserve"):
        if (toks[pos+1][0] != T_INT):
          print(f"\033[31mError\033[0m: expected number after reserve.");
          print(f"\033[96mHint\033[0m: syntax for `reserve` is: reserve 10 bytes");
          exit(1);
        if (toks[pos+2][0] == T_BYTE):
          restype = 1; # bytes
        else:
          print(f"\033[31mError\033[0m: expected bytes after reserve #n.");
          print(f"\033[96mHint\033[0m: syntax for `reserve` is: reserve 10 bytes");
          exit(1);
        ast.append([ASTRES, "__B_reserve", toks[pos+1][1]*restype, pc]);
        pc += toks[pos+1][1]*restype;
        pos += 3;
      elif (toks[pos][1] == "extern"):
        if (toks[pos+1][0] != T_STR):
          print(f"\033[31mError\033[0m: expected filename after extern.");
          print(f"\033[96mHint\033[0m: syntax for `extern` is: extern \"filename\"");
          exit(1);
        with open(toks[pos+1][1], "rb") as extern_file:
          extern_source = extern_file.read()
        ast.append([ASTRES, "__B_extern", extern_source, pc]);
        pc += len(extern_source);
        pos += 2;
    elif (toks[pos][0] == T_EOL):
      pos += 1;
    else:
      print("vasm: unknown token: %s %s" % (HUMAN_TOKS[toks[pos][0]], toks[pos][1]));
      exit(1);
  ast.append([ASTEOF, 0, 0, pc]);
  if (expm):
    print(f"\033[92m{filename}: exported {len(labels)} symbols\033[0m");
  else:
    print(f"{filename}: compiled {pc} bytes");
  return ast, labels;

# Big endian
AsWord = lambda a: ((a >> 8), (a & 0xFF));
As32   = lambda a: ((a >> 24), ((a >> 16) & 0xFF), ((a >> 8) & 0xFF), (a & 0xFF));
get_inst3regfull = lambda opcode,r1,r2,r3,imm12: (opcode << 24) | (r1 << 20) | (r2 << 16) | (r3 << 12) | imm12;
get_inst3reg     = lambda opcode,r1,r2,r3,imm12: As32(get_inst3regfull(opcode,r1,r2,r3,imm12));

CompileInst = lambda prog, b, labels, pos: \
  ((get_inst3reg(0x00, 0, 0, 0, 0), pos+1)               if (b[1] == "nop") else
   (get_inst3reg(0x01, b[2][0], b[2][1], 0, 0), pos+1)   if (b[1] == "mov-rr") else
   (get_inst3reg(0x02, b[2][0], 0, 0, b[2][1]), pos+1)   if (b[1] == "mov-ri") else
   (get_inst3reg(0x03, *b[2]), pos+1)                    if (b[1] == "add-rrri") else
   (get_inst3reg(0x04, *b[2]), pos+1)                    if (b[1] == "sub-rrri") else
   (get_inst3reg(0x0F, 0, 0, 0, labels[b[2][0]]), pos+1) if (b[1] == "jnz-l") else
   (get_inst3reg(0x12, 0, 0, 0, 0), pos+1)               if (b[1] == "hlt") else
   [print("vasm: unknown compilation node %s" % b[1]), (tuple(), 0x1_00_0000)][1]
  );

# Compiler:
def CompileRiscGC(prog: list, labs: dict):
  code = bytearray();
  pos = 0;
  while (prog[pos][0] != ASTEOF):
    if (prog[pos][0] == ASTINS):
      compbytes, pos = CompileInst(prog, prog[pos], labs, pos);
      if (pos == 0x1_00_0000): exit(1);
      code.extend(compbytes);
    elif (prog[pos][0] == ASTBYTES):
      code.extend(prog[pos][2]);
      pos += 1;
    elif (prog[pos][0] == ASTRES):
      code.extend(bytes(prog[pos][2]));
      pos += 1;
    else:
      print("vasm: unknown ast node: %s" % HUMAN_AST[prog[pos][0]]);
      exit(1);
  return code, 0;

def IVasm() -> int:
  print("interactive vasm");
  while (1):
    cd = input(">>> \033[32m");
    if (not cd):
      print(end="\033[0m");
      continue;
    if (cd == "exit"): exit(0);
    print(end="\033[97m");
    tokens, exitcode = Lex(cd, "input");
    ast, labs = Parse(tokens, "input", False);
    labs = OffsetLabs(labs, 0x030000);
    c, exitcode = CompileRiscGC(ast, labs);
    print(end="\033[96m");
    for i in c:
      print(end="%02X " % i);
    print("\b\033[0m");
  exit(0);

def main(argc: int, argv: list) -> int:
  diskmode = False;
  exportmode = False;
  if (argc == 1):
    print("No arguments given");
    usage();
    return 1;
  elif (argc == 2):
    print("No binary filename given");
    return 1;
  argp: int = 1;
  imp_files = [];
  offset = 0x000;
  while (argp < argc):
    match (argv[argp]):
      case "-e":
        exportmode = 1;
        argp += 1;
      case "-i":
        imp_files.append(argv[argp+1]);
        argp += 2;
      case "-o":
        offset = int(argv[argp+1], base=16);
        argp += 2;
      case "-d":
        diskmode = True;
        argp += 1;
      case "-I":
        IVasm();
        argp += 1;
        break;
      case "-h":
        usage();
        return 0;
      case _:
        progname = argv[argp];
        outname = argv[argp+1];
        break;

  if (argc == 3):
    progname = argv[1];
    outname = argv[2];

  with open(progname, "r") as fl:
    src = fl.read();
  src = RemEmpty(src)+"\0";
  tokens, exitcode = Lex(src, progname);
  if (type(tokens[1]) is int):
    print("Fatal error. Can't compile");
    exit(tokens);
  ast, labs = Parse(tokens, progname, exportmode);
  labs = OffsetLabs(labs, offset);
  # PrintLabs(labs);
  if (exportmode):
    ExportLabs(progname, labs, outname);
    exit(1);
  for imp_file in imp_files:
    labs = ImportLabs(progname, labs, imp_file);
  c, exitcode = CompileRiscGC(ast, labs);
  with open(outname, "wb") as fl:
    fl.write(c);

  return 0;

sys.exit(main(len(sys.argv), sys.argv));
